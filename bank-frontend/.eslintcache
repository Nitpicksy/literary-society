[{"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\index.js":"1","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\App.js":"2","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\reportWebVitals.js":"3","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardData.js":"4","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataExport.js":"5","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataStyles.js":"6","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\UI\\Form\\Form.js":"7","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataActions.js":"8","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\UI\\Input\\Input.js":"9","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\shared\\checkValidity.js":"10","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\axios-endpoint.js":"11"},{"size":1391,"mtime":1608126125016,"results":"12","hashOfConfig":"13"},{"size":554,"mtime":1608126125014,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1608126125017,"results":"15","hashOfConfig":"13"},{"size":4768,"mtime":1608314745964,"results":"16","hashOfConfig":"13"},{"size":70,"mtime":1608126125016,"results":"17","hashOfConfig":"13"},{"size":525,"mtime":1608126125016,"results":"18","hashOfConfig":"13"},{"size":2589,"mtime":1608126125014,"results":"19","hashOfConfig":"13"},{"size":709,"mtime":1608126125016,"results":"20","hashOfConfig":"13"},{"size":2753,"mtime":1608126125014,"results":"21","hashOfConfig":"13"},{"size":1567,"mtime":1608126125017,"results":"22","hashOfConfig":"13"},{"size":188,"mtime":1608314745964,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"d0an6v",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\index.js",[],["48","49"],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\App.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\reportWebVitals.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardData.js",["50"],"import React, { useEffect, useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport * as actions from './EnterCreditCardDataExport';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useStyles } from './EnterCreditCardDataStyles';\r\nimport Form from '../../UI/Form/Form';\r\nimport { useHistory } from 'react-router';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport { connect } from 'react-redux';\r\n\r\nconst EnterCreditData = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    const history = useHistory();\r\n    const [paymentId, setPaymentId] = useState(false);\r\n\r\n    const [controls, setControls] = useState({\r\n        pan: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                label: 'PAN',\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: '^[0-9]{16}$'\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Invalid PAN number.'\r\n            }\r\n        },\r\n        cardHolderName: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                label: 'Card Holder Name'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: \"^(([A-Za-zÀ-ƒ]+[.]?[ ]?|[a-zÀ-ƒ]+['-]?){0,4})$\"\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Invalid Card Holder Name'\r\n            }, \r\n            toUpperCase: true\r\n        },\r\n        expirationDate: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                label: 'Expiration date',\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: \"^([01]?[0-9]?(\\/)[0-9]{2})$\"\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'You need to enter month/year'\r\n            }\r\n        },\r\n        securityCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                label: 'Security Code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: '^[0-9]{3,4}$'\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Security code should contain only numbers.'\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    const submitHander = (event) => {\r\n        event.preventDefault();\r\n        props.onConfirmPayment(controls.pan.value, controls.securityCode.value,\r\n            controls.cardHolderName.value,controls.expirationDate.value,paymentId, history);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const { id } = props.match.params;\r\n        setPaymentId(id);\r\n    }, [props.match.params]);\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <CreditCardIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">Credit Card Data</Typography>\r\n                <form className={classes.form} noValidate onSubmit={submitHander}>\r\n                    <Form controls={controls} setControls={setControls} setFormIsValid={setFormIsValid} />\r\n                    <Button type=\"submit\" color=\"primary\" className={classes.submit} fullWidth variant=\"contained\"\r\n                        onClick={submitHander} disabled={!formIsValid}>Confirm purchase</Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onConfirmPayment: (pan, securityCode,cardHolderName,expirationDate,paymentId, history) => \r\n            dispatch(actions.confirmPayment(pan, securityCode,cardHolderName,expirationDate,paymentId, history))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(EnterCreditData);\r\n","D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataExport.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataStyles.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\UI\\Form\\Form.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\components\\EnterCreditCardData\\EnterCreditCardDataActions.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\UI\\Input\\Input.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\shared\\checkValidity.js",[],"D:\\Fax\\master\\Sistemi elektronskog placanja\\Projekat\\ProjekatKod\\literary-society\\bank-frontend\\src\\axios-endpoint.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":70,"column":41,"nodeType":"57","messageId":"58","endLine":70,"endColumn":42,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["62","63"],"no-global-assign","no-unsafe-negation",{"messageId":"64","fix":"65","desc":"66"},{"messageId":"67","fix":"68","desc":"69"},"removeEscape",{"range":"70","text":"71"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"72","text":"73"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2348,2349],"",[2348,2348],"\\"]