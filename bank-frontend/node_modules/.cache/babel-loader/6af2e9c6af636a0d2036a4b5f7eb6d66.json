{"ast":null,"code":"export const checkValidity = (value, rules, name, patternErrorMessage) => {\n  if (!rules) {\n    return {\n      isValid: true,\n      errorMessage: ''\n    };\n  }\n\n  let isRequired = false;\n  let isValid = true;\n  let errorMessage = name + ' ';\n\n  if (rules.required) {\n    isRequired = value.trim() === '';\n\n    if (isRequired) {\n      isValid = false;\n      errorMessage = name + ' is required.';\n    }\n  }\n\n  if (!isRequired) {\n    if (rules.minlength) {\n      isValid = value.length >= rules.minlength;\n\n      if (!isValid) {\n        errorMessage = 'Minimal length for ' + name.toLowerCase() + ' is ' + rules.minlength + '.';\n      }\n    }\n\n    if (isValid && rules.maxlength) {\n      isValid = value.length <= rules.maxlength;\n\n      if (!isValid) {\n        errorMessage = 'Maximal length for ' + name.toLowerCase() + ' is ' + rules.maxlength + '.';\n      }\n    }\n\n    if (isValid && rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value);\n\n      if (!isValid) {\n        errorMessage = 'Entered data is not a number.';\n      }\n    }\n\n    if (isValid && rules.pattern) {\n      const pattern = new RegExp(rules.pattern);\n      isValid = pattern.test(value);\n\n      if (!isValid) {\n        errorMessage = patternErrorMessage;\n      }\n    }\n  }\n\n  return {\n    isValid: isValid,\n    errorMessage: errorMessage\n  };\n};","map":{"version":3,"sources":["D:/Fax/master/Sistemi elektronskog placanja/Projekat/ProjekatKod/literary-society/bank-frontend/src/shared/checkValidity.js"],"names":["checkValidity","value","rules","name","patternErrorMessage","isValid","errorMessage","isRequired","required","trim","minlength","length","toLowerCase","maxlength","isNumeric","pattern","test","RegExp"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,mBAArB,KAA6C;AAEtE,MAAI,CAACF,KAAL,EAAY;AACR,WAAO;AAACG,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,YAAY,EAAE;AAA9B,KAAP;AACH;;AAED,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIF,OAAO,GAAG,IAAd;AACA,MAAIC,YAAY,GAAGH,IAAI,GAAG,GAA1B;;AAEA,MAAID,KAAK,CAACM,QAAV,EAAoB;AAChBD,IAAAA,UAAU,GAAGN,KAAK,CAACQ,IAAN,OAAiB,EAA9B;;AACA,QAAIF,UAAJ,EAAgB;AACZF,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,YAAY,GAAGH,IAAI,GAAG,eAAtB;AACH;AACJ;;AAED,MAAG,CAACI,UAAJ,EAAe;AACX,QAAIL,KAAK,CAACQ,SAAV,EAAqB;AACjBL,MAAAA,OAAO,GAAGJ,KAAK,CAACU,MAAN,IAAgBT,KAAK,CAACQ,SAAhC;;AACA,UAAI,CAACL,OAAL,EAAc;AACVC,QAAAA,YAAY,GAAG,wBAAwBH,IAAI,CAACS,WAAL,EAAxB,GAA6C,MAA7C,GAAsDV,KAAK,CAACQ,SAA5D,GAAwE,GAAvF;AACH;AACJ;;AAED,QAAIL,OAAO,IAAIH,KAAK,CAACW,SAArB,EAAgC;AAC5BR,MAAAA,OAAO,GAAGJ,KAAK,CAACU,MAAN,IAAgBT,KAAK,CAACW,SAAhC;;AACA,UAAI,CAACR,OAAL,EAAc;AACVC,QAAAA,YAAY,GAAG,wBAAwBH,IAAI,CAACS,WAAL,EAAxB,GAA6C,MAA7C,GAAsDV,KAAK,CAACW,SAA5D,GAAyE,GAAxF;AACH;AACJ;;AAED,QAAIR,OAAO,IAAIH,KAAK,CAACY,SAArB,EAAgC;AAC5B,YAAMC,OAAO,GAAG,OAAhB;AACAV,MAAAA,OAAO,GAAGU,OAAO,CAACC,IAAR,CAAaf,KAAb,CAAV;;AACA,UAAI,CAACI,OAAL,EAAc;AACVC,QAAAA,YAAY,GAAG,+BAAf;AACH;AACJ;;AAED,QAAID,OAAO,IAAIH,KAAK,CAACa,OAArB,EAA8B;AAC1B,YAAMA,OAAO,GAAG,IAAIE,MAAJ,CAAWf,KAAK,CAACa,OAAjB,CAAhB;AACAV,MAAAA,OAAO,GAAGU,OAAO,CAACC,IAAR,CAAaf,KAAb,CAAV;;AACA,UAAI,CAACI,OAAL,EAAc;AACVC,QAAAA,YAAY,GAAGF,mBAAf;AACH;AACJ;AACJ;;AACD,SAAO;AAAEC,IAAAA,OAAO,EAAEA,OAAX;AAAoBC,IAAAA,YAAY,EAAEA;AAAlC,GAAP;AACH,CAlDM","sourcesContent":["export const checkValidity = (value, rules, name, patternErrorMessage) => {\r\n\r\n    if (!rules) {\r\n        return {isValid: true, errorMessage: ''} ;\r\n    }\r\n\r\n    let isRequired = false;\r\n    let isValid = true;\r\n    let errorMessage = name + ' ';\r\n\r\n    if (rules.required) {\r\n        isRequired = value.trim() === '';\r\n        if (isRequired) {\r\n            isValid = false;\r\n            errorMessage = name + ' is required.';\r\n        }\r\n    }\r\n\r\n    if(!isRequired){\r\n        if (rules.minlength) {\r\n            isValid = value.length >= rules.minlength;\r\n            if (!isValid) {\r\n                errorMessage = 'Minimal length for ' + name.toLowerCase() + ' is ' + rules.minlength + '.';\r\n            }\r\n        }\r\n    \r\n        if (isValid && rules.maxlength) {\r\n            isValid = value.length <= rules.maxlength;\r\n            if (!isValid) {\r\n                errorMessage = 'Maximal length for ' + name.toLowerCase() + ' is ' + rules.maxlength  + '.';\r\n            }\r\n        }\r\n    \r\n        if (isValid && rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value);\r\n            if (!isValid) {\r\n                errorMessage = 'Entered data is not a number.';\r\n            }\r\n        }\r\n\r\n        if (isValid && rules.pattern) {\r\n            const pattern = new RegExp(rules.pattern);\r\n            isValid = pattern.test(value)\r\n            if (!isValid) {\r\n                errorMessage = patternErrorMessage;\r\n            }\r\n        }\r\n    }\r\n    return { isValid: isValid, errorMessage: errorMessage };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}