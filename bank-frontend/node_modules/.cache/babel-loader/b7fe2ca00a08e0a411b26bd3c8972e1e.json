{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fax\\\\master\\\\Sistemi elektronskog placanja\\\\Projekat\\\\ProjekatKod\\\\literary-society\\\\bank-frontend\\\\src\\\\components\\\\EnterCreditCardData\\\\EnterCreditCardData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as actions from './EnterCreditCardDataExport';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useStyles } from './EnterCreditCardDataStyles';\nimport Form from '../../UI/Form/Form';\nimport { useHistory } from 'react-router';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport { connect } from 'react-redux';\n\nconst EnterCreditData = props => {\n  _s();\n\n  const classes = useStyles();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const history = useHistory();\n  const [paymentId, setPaymentId] = useState(false);\n  const [controls, setControls] = useState({\n    pan: {\n      elementType: 'input',\n      elementConfig: {\n        label: 'PAN'\n      },\n      value: '',\n      validation: {\n        required: true,\n        pattern: '^[0-9]{16}$'\n      },\n      valid: false,\n      touched: false,\n      error: false,\n      errorMessage: '',\n      additionalData: {\n        errorMessage: 'Invalid PAN number.'\n      }\n    },\n    cardHolderName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        label: 'Card Holder Name'\n      },\n      value: '',\n      validation: {\n        required: true,\n        pattern: \"^(([A-Za-zÀ-ƒ]+[.]?[ ]?|[a-zÀ-ƒ]+['-]?){0,4})$\"\n      },\n      valid: false,\n      touched: false,\n      error: false,\n      errorMessage: '',\n      additionalData: {\n        errorMessage: 'Invalid Card Holder Name'\n      },\n      toUpperCase: true\n    },\n    expirationDate: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        label: 'Expiration date'\n      },\n      value: '',\n      validation: {\n        required: true,\n        pattern: \"^([01]?[0-9]?(\\/)[0-9]{2})$\"\n      },\n      valid: false,\n      touched: false,\n      error: false,\n      errorMessage: '',\n      additionalData: {\n        errorMessage: 'You need to enter month/year'\n      }\n    },\n    securityCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        label: 'Security Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        pattern: '^[0-9]{3,4}$'\n      },\n      valid: false,\n      touched: false,\n      error: false,\n      errorMessage: '',\n      additionalData: {\n        errorMessage: 'Security code should contain only numbers.'\n      }\n    }\n  });\n\n  const submitHander = event => {\n    event.preventDefault();\n    props.onConfirmPayment(controls.pan.value, controls.securityCode.value, controls.cardHolderName.value, controls.expirationDate.value, paymentId, history);\n  };\n\n  useEffect(() => {\n    const {\n      id\n    } = props.match.params;\n    setPaymentId(id);\n  }, [props.match.params]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: classes.avatar,\n        children: /*#__PURE__*/_jsxDEV(CreditCardIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h4\",\n        children: \"Credit Card Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        noValidate: true,\n        onSubmit: submitHander,\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          controls: controls,\n          setControls: setControls,\n          setFormIsValid: setFormIsValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"primary\",\n          className: classes.submit,\n          fullWidth: true,\n          variant: \"contained\",\n          onClick: submitHander,\n          disabled: !formIsValid,\n          children: \"Confirm purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EnterCreditData, \"+mHS/raoQsKuBEcuOlG9ezqOXcs=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = EnterCreditData;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onConfirmPayment: (pan, securityCode, cardHolderName, expirationDate, paymentId, history) => dispatch(actions.confirmPayment(pan, securityCode, cardHolderName, expirationDate, paymentId, history))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(EnterCreditData);\n\nvar _c;\n\n$RefreshReg$(_c, \"EnterCreditData\");","map":{"version":3,"sources":["D:/Fax/master/Sistemi elektronskog placanja/Projekat/ProjekatKod/literary-society/bank-frontend/src/components/EnterCreditCardData/EnterCreditCardData.js"],"names":["React","useEffect","useState","Avatar","Button","CssBaseline","actions","Typography","Container","useStyles","Form","useHistory","CreditCardIcon","connect","EnterCreditData","props","classes","formIsValid","setFormIsValid","history","paymentId","setPaymentId","controls","setControls","pan","elementType","elementConfig","label","value","validation","required","pattern","valid","touched","error","errorMessage","additionalData","cardHolderName","type","toUpperCase","expirationDate","securityCode","submitHander","event","preventDefault","onConfirmPayment","id","match","params","paper","avatar","form","submit","mapDispatchToProps","dispatch","confirmPayment"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport * as actions from './EnterCreditCardDataExport';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useStyles } from './EnterCreditCardDataStyles';\r\nimport Form from '../../UI/Form/Form';\r\nimport { useHistory } from 'react-router';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport { connect } from 'react-redux';\r\n\r\nconst EnterCreditData = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    const history = useHistory();\r\n    const [paymentId, setPaymentId] = useState(false);\r\n\r\n    const [controls, setControls] = useState({\r\n        pan: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                label: 'PAN',\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: '^[0-9]{16}$'\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Invalid PAN number.'\r\n            }\r\n        },\r\n        cardHolderName: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                label: 'Card Holder Name'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: \"^(([A-Za-zÀ-ƒ]+[.]?[ ]?|[a-zÀ-ƒ]+['-]?){0,4})$\"\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Invalid Card Holder Name'\r\n            }, \r\n            toUpperCase: true\r\n        },\r\n        expirationDate: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                label: 'Expiration date',\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: \"^([01]?[0-9]?(\\/)[0-9]{2})$\"\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'You need to enter month/year'\r\n            }\r\n        },\r\n        securityCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                label: 'Security Code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                pattern: '^[0-9]{3,4}$'\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            additionalData: {\r\n                errorMessage: 'Security code should contain only numbers.'\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    const submitHander = (event) => {\r\n        event.preventDefault();\r\n        props.onConfirmPayment(controls.pan.value, controls.securityCode.value,\r\n            controls.cardHolderName.value,controls.expirationDate.value,paymentId, history);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const { id } = props.match.params;\r\n        setPaymentId(id);\r\n    }, [props.match.params]);\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <CreditCardIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">Credit Card Data</Typography>\r\n                <form className={classes.form} noValidate onSubmit={submitHander}>\r\n                    <Form controls={controls} setControls={setControls} setFormIsValid={setFormIsValid} />\r\n                    <Button type=\"submit\" color=\"primary\" className={classes.submit} fullWidth variant=\"contained\"\r\n                        onClick={submitHander} disabled={!formIsValid}>Confirm purchase</Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onConfirmPayment: (pan, securityCode,cardHolderName,expirationDate,paymentId, history) => \r\n            dispatch(actions.confirmPayment(pan, securityCode,cardHolderName,expirationDate,paymentId, history))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(EnterCreditData);"]},"metadata":{},"sourceType":"module"}