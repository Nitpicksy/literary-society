{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fax\\\\master\\\\Sistemi elektronskog placanja\\\\Projekat\\\\ProjekatKod\\\\literary-society\\\\bank-frontend\\\\src\\\\UI\\\\Form\\\\Form.js\";\nimport { React } from 'react';\nimport Input from '../Input/Input';\nimport { checkValidity } from '../../shared/checkValidity';\n\nconst Form = props => {\n  const inputChangedHandler = (event, controlName) => {\n    let errorMessage;\n    let value = event.target.value;\n\n    if (props.controls[controlName].elementType === 'checkbox') {\n      value = event.target.checked;\n    } else {\n      if (props.controls[controlName].additionalData) {\n        errorMessage = props.controls[controlName].additionalData.errorMessage;\n      }\n    }\n\n    const validationData = checkValidity(value, props.controls[controlName].validation, props.controls[controlName].elementConfig.label, errorMessage);\n    const updatedControls = { ...props.controls,\n      [controlName]: { ...props.controls[controlName],\n        value: value,\n        error: !validationData.isValid,\n        errorMessage: validationData.errorMessage,\n        touched: true,\n        valid: validationData.isValid\n      }\n    };\n    let formIsValid = true;\n\n    for (let inputIdentifiers in updatedControls) {\n      formIsValid = updatedControls[inputIdentifiers].valid && formIsValid;\n    }\n\n    props.setControls(updatedControls);\n    props.setFormIsValid(formIsValid);\n\n    if (props.controls[controlName].toUpperCase) {\n      console.log(\"To upper case\");\n      event.target.value = event.target.value.toUpperCase();\n    }\n  };\n\n  const formElementsArray = [];\n\n  for (let key in props.controls) {\n    formElementsArray.push({\n      id: key,\n      config: props.controls[key]\n    });\n  }\n\n  var form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    error: formElement.config.error,\n    errorMessage: formElement.config.errorMessage,\n    additionalData: formElement.config.additionalData,\n    changed: event => inputChangedHandler(event, formElement.id)\n  }, formElement.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: form\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/Fax/master/Sistemi elektronskog placanja/Projekat/ProjekatKod/literary-society/bank-frontend/src/UI/Form/Form.js"],"names":["React","Input","checkValidity","Form","props","inputChangedHandler","event","controlName","errorMessage","value","target","controls","elementType","checked","additionalData","validationData","validation","elementConfig","label","updatedControls","error","isValid","touched","valid","formIsValid","inputIdentifiers","setControls","setFormIsValid","toUpperCase","console","log","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import { React } from 'react'\r\nimport Input from '../Input/Input';\r\nimport { checkValidity } from '../../shared/checkValidity';\r\n\r\nconst Form = (props) => {\r\n\r\n    const inputChangedHandler = (event, controlName) => {\r\n        let errorMessage;\r\n        let value = event.target.value;\r\n        if(props.controls[controlName].elementType === 'checkbox'){\r\n            value = event.target.checked;\r\n        }else {\r\n            if(props.controls[controlName].additionalData){\r\n                errorMessage = props.controls[controlName].additionalData.errorMessage\r\n            }\r\n        }\r\n        const validationData = checkValidity(value, props.controls[controlName].validation, props.controls[controlName].elementConfig.label,errorMessage);\r\n\r\n        const updatedControls = {\r\n            ...props.controls,\r\n            [controlName]: {\r\n                ...props.controls[controlName],\r\n                value: value,\r\n                error: !validationData.isValid,\r\n                errorMessage: validationData.errorMessage,\r\n                touched:true, \r\n                valid: validationData.isValid\r\n            }\r\n        };\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifiers in updatedControls) {\r\n            formIsValid = updatedControls[inputIdentifiers].valid && formIsValid;\r\n        }\r\n        props.setControls(updatedControls);\r\n        props.setFormIsValid(formIsValid);\r\n\r\n        if(props.controls[controlName].toUpperCase){\r\n            console.log(\"To upper case\");\r\n            event.target.value = event.target.value.toUpperCase();\r\n        }\r\n    }\r\n\r\n    const formElementsArray = [];\r\n    for (let key in props.controls) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: props.controls[key]\r\n        });\r\n    }\r\n\r\n    var form = formElementsArray.map(formElement => (\r\n        <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            error={formElement.config.error}\r\n            errorMessage={formElement.config.errorMessage}\r\n            additionalData = {formElement.config.additionalData}\r\n            changed={(event) => inputChangedHandler(event, formElement.id)} />\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            {form}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}